package org.eclipse.incquery.examples.cps.xform.m2m.incr.aggr.queries

import "http://org.eclipse.incquery/model/cps"
import "http://org.eclipse.incquery/model/deployment"
import "http://org.eclipse.incquery/model/cps-traceability"
import java org.eclipse.incquery.examples.cps.xform.m2m.util.SignalUtil

pattern hostInstances(hostInstance) {
	HostType.instances(_hostType, hostInstance);
}
pattern appTypes(appType) {
	CyberPhysicalSystem.appTypes(_cps, appType);
}

pattern appInstances(appInstance) {
	ApplicationType.instances(_appType, appInstance);
}
pattern stateMachines(stateMachine) {
	ApplicationType.behavior(_appType, stateMachine);
}
pattern states(state) {
	StateMachine.states(_sm,state);
}
pattern transitions(transition) {
	State.outgoingTransitions(_sm,transition);
}

pattern depApp2depHost(depapp, dephost){
	DeploymentHost.applications(dephost,depapp);
}

pattern depBehavior2depApp(behavior, depapp){
	DeploymentApplication.behavior(depapp, behavior);
}

pattern state2Statemachine(state, sm){
	StateMachine.states(sm, state);
}

pattern transition2StateMachine(trans, sm){
	StateMachine.states(sm, state);
	State.outgoingTransitions(state, trans);
}
pattern sm2Deploymentbehavior(cps2dep : CPSToDeployment,sm : StateMachine,dapp,db) {
	find cps2depTrace(cps2dep,_trace,sm,db);
	DeploymentApplication.behavior(dapp,db);	
	
}
pattern transition2AppType(trans, appType){
	ApplicationType.behavior(appType, sm);
	StateMachine.states(sm, state);
	State.outgoingTransitions(state, trans);
}

pattern cps2depTrace(cps2dep, trace, cpsElement, depElement) {
	CPSToDeployment.traces(cps2dep, trace);
	CPS2DeplyomentTrace.cpsElements(trace, cpsElement);
	CPS2DeplyomentTrace.deploymentElements(trace, depElement);
}

pattern cpsBehaviorTrace(cpsBeh, trace) {
	find cps2depTrace(_, trace, cpsBeh, _);
	StateMachine(cpsBeh);
}

pattern depTransition(depTransition) {
	BehaviorTransition(depTransition);
}

//
pattern applicationInstance(appType, appInstance, host) {
	ApplicationType.instances(appType, appInstance);
	ApplicationInstance.allocatedTo(appInstance, host);
}
pattern cpsApplicationTransition(cpsApp, cpsTransition) {
	find cps2depTrace(_, _, cpsTransition, depTransition);
	DeploymentApplication.behavior.transitions(depApp, depTransition);
	find cps2depTrace(_, _, cpsApp, depApp);
}
pattern sendTransitionAppSignal(transition, app, signal) {
 	Transition.action(transition, action);
 	app == eval(SignalUtil.getAppId(action));
 	signal == eval(SignalUtil.getSignalId(action));
}
pattern waitTransitionAppSignal(transition, appType, signal) {
 	ApplicationType.behavior(appType, stateMachine);
	StateMachine.states(stateMachine, source);
	State.outgoingTransitions(source, transition);
 	Transition.action(transition, action);
 	check(
 		SignalUtil.isWait(action)
 	);
 	signal == eval(SignalUtil.getSignalId(action));
}
//
pattern triggerPair(cpsTrigger, cpsTarget) {
	find sendTransitionAppSignal(cpsTrigger, appId, signal);
	find waitTransitionAppSignal(cpsTarget, waitApp, signal);
	ApplicationType.id(waitApp, appId);
}
//
pattern communicatingAppInstances(sourceAppInstance, targetAppInstance) {
	find applicationInstance(_, sourceAppInstance, sourceHostInstance);
	find applicationInstance(_, targetAppInstance, targetHostInstance);
	find reachableHosts(sourceHostInstance, targetHostInstance);
}

pattern hostCommunication(fromHost, toHost) {
	HostInstance.communicateWith(fromHost, toHost);
}

pattern reachableHosts(source, target) {
	find hostCommunication(source, target);
} or {
	HostInstance(source);
	HostInstance(target);
	source == target;
}